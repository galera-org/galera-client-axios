/* tslint:disable */
/* eslint-disable */
/**
 * galera
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { AlbumAddMedia } from "../models";
// @ts-ignore
import { AlbumInsertData } from "../models";
// @ts-ignore
import { AlbumResponse } from "../models";
// @ts-ignore
import { AlbumUpdateData } from "../models";
// @ts-ignore
import { ClaimsEncoded } from "../models";
// @ts-ignore
import { LoginResponse } from "../models";
// @ts-ignore
import { MediaDescription } from "../models";
// @ts-ignore
import { MediaResponse } from "../models";
// @ts-ignore
import { NewUser } from "../models";
// @ts-ignore
import { SystemInfoPublic } from "../models";
// @ts-ignore
import { UserLogin } from "../models";
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Adds media to an album
     * @param {Array<AlbumAddMedia>} albumAddMedia
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesAlbumAddMedia: async (
      albumAddMedia: Array<AlbumAddMedia>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'albumAddMedia' is not null or undefined
      assertParamExists("routesAlbumAddMedia", "albumAddMedia", albumAddMedia);
      const localVarPath = `/album/media`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        albumAddMedia,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new album
     * @param {AlbumInsertData} albumInsertData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesCreateAlbum: async (
      albumInsertData: AlbumInsertData,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'albumInsertData' is not null or undefined
      assertParamExists(
        "routesCreateAlbum",
        "albumInsertData",
        albumInsertData
      );
      const localVarPath = `/album`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        albumInsertData,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new user
     * @param {NewUser} newUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesCreateUser: async (
      newUser: NewUser,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'newUser' is not null or undefined
      assertParamExists("routesCreateUser", "newUser", newUser);
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newUser,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes an album
     * @param {string} albumUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesDeleteAlbum: async (
      albumUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'albumUuid' is not null or undefined
      assertParamExists("routesDeleteAlbum", "albumUuid", albumUuid);
      const localVarPath = `/album/{album_uuid}`.replace(
        `{${"album_uuid"}}`,
        encodeURIComponent(String(albumUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of albums of an authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetAlbumList: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/album`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a list of media in an album
     * @param {string} albumUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetAlbumStructure: async (
      albumUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'albumUuid' is not null or undefined
      assertParamExists("routesGetAlbumStructure", "albumUuid", albumUuid);
      const localVarPath = `/album/{album_uuid}/media`.replace(
        `{${"album_uuid"}}`,
        encodeURIComponent(String(albumUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a media
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetMediaByUuid: async (
      mediaUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mediaUuid' is not null or undefined
      assertParamExists("routesGetMediaByUuid", "mediaUuid", mediaUuid);
      const localVarPath = `/media/{media_uuid}`.replace(
        `{${"media_uuid"}}`,
        encodeURIComponent(String(mediaUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a list of liked media.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetMediaLikedList: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/media/liked`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesIndex: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * You must provide either a username or an email together with a password.
     * @param {UserLogin} userLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesLogin: async (
      userLogin: UserLogin,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLogin' is not null or undefined
      assertParamExists("routesLogin", "userLogin", userLogin);
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userLogin,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes description of a media
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaDeleteDescription: async (
      mediaUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mediaUuid' is not null or undefined
      assertParamExists("routesMediaDeleteDescription", "mediaUuid", mediaUuid);
      const localVarPath = `/media/{media_uuid}/description`.replace(
        `{${"media_uuid"}}`,
        encodeURIComponent(String(mediaUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Likes the media.
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaLike: async (
      mediaUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mediaUuid' is not null or undefined
      assertParamExists("routesMediaLike", "mediaUuid", mediaUuid);
      const localVarPath = `/media/{media_uuid}/like`.replace(
        `{${"media_uuid"}}`,
        encodeURIComponent(String(mediaUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a list of all media
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaStructure: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/media`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Unlikes the media.
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaUnlike: async (
      mediaUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mediaUuid' is not null or undefined
      assertParamExists("routesMediaUnlike", "mediaUuid", mediaUuid);
      const localVarPath = `/media/{media_uuid}/like`.replace(
        `{${"media_uuid"}}`,
        encodeURIComponent(String(mediaUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates description of a media
     * @param {string} mediaUuid
     * @param {MediaDescription} mediaDescription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaUpdateDescription: async (
      mediaUuid: string,
      mediaDescription: MediaDescription,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mediaUuid' is not null or undefined
      assertParamExists("routesMediaUpdateDescription", "mediaUuid", mediaUuid);
      // verify required parameter 'mediaDescription' is not null or undefined
      assertParamExists(
        "routesMediaUpdateDescription",
        "mediaDescription",
        mediaDescription
      );
      const localVarPath = `/media/{media_uuid}/description`.replace(
        `{${"media_uuid"}}`,
        encodeURIComponent(String(mediaUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        mediaDescription,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Refreshes sent token
     * @param {ClaimsEncoded} claimsEncoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesRefreshToken: async (
      claimsEncoded: ClaimsEncoded,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'claimsEncoded' is not null or undefined
      assertParamExists("routesRefreshToken", "claimsEncoded", claimsEncoded);
      const localVarPath = `/login/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        claimsEncoded,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Searches for new media
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesScanMedia: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/scan_media`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns the public system information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesSystemInfoPublic: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/system/info/public`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates already existing album
     * @param {string} albumUuid
     * @param {AlbumUpdateData} albumUpdateData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesUpdateAlbum: async (
      albumUuid: string,
      albumUpdateData: AlbumUpdateData,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'albumUuid' is not null or undefined
      assertParamExists("routesUpdateAlbum", "albumUuid", albumUuid);
      // verify required parameter 'albumUpdateData' is not null or undefined
      assertParamExists(
        "routesUpdateAlbum",
        "albumUpdateData",
        albumUpdateData
      );
      const localVarPath = `/album/{album_uuid}`.replace(
        `{${"album_uuid"}}`,
        encodeURIComponent(String(albumUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        albumUpdateData,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * Adds media to an album
     * @param {Array<AlbumAddMedia>} albumAddMedia
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesAlbumAddMedia(
      albumAddMedia: Array<AlbumAddMedia>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesAlbumAddMedia(
          albumAddMedia,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Creates a new album
     * @param {AlbumInsertData} albumInsertData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesCreateAlbum(
      albumInsertData: AlbumInsertData,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesCreateAlbum(
          albumInsertData,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Creates a new user
     * @param {NewUser} newUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesCreateUser(
      newUser: NewUser,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesCreateUser(newUser, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Deletes an album
     * @param {string} albumUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesDeleteAlbum(
      albumUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesDeleteAlbum(albumUuid, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Retrieves a list of albums of an authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesGetAlbumList(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<AlbumResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesGetAlbumList(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Gets a list of media in an album
     * @param {string} albumUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesGetAlbumStructure(
      albumUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MediaResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesGetAlbumStructure(
          albumUuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns a media
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesGetMediaByUuid(
      mediaUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesGetMediaByUuid(
          mediaUuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns a list of liked media.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesGetMediaLikedList(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MediaResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesGetMediaLikedList(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesIndex(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.routesIndex(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * You must provide either a username or an email together with a password.
     * @param {UserLogin} userLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesLogin(
      userLogin: UserLogin,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.routesLogin(
        userLogin,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Deletes description of a media
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesMediaDeleteDescription(
      mediaUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesMediaDeleteDescription(
          mediaUuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Likes the media.
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesMediaLike(
      mediaUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.routesMediaLike(
        mediaUuid,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Gets a list of all media
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesMediaStructure(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MediaResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesMediaStructure(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Unlikes the media.
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesMediaUnlike(
      mediaUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesMediaUnlike(mediaUuid, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Updates description of a media
     * @param {string} mediaUuid
     * @param {MediaDescription} mediaDescription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesMediaUpdateDescription(
      mediaUuid: string,
      mediaDescription: MediaDescription,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesMediaUpdateDescription(
          mediaUuid,
          mediaDescription,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Refreshes sent token
     * @param {ClaimsEncoded} claimsEncoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesRefreshToken(
      claimsEncoded: ClaimsEncoded,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClaimsEncoded>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesRefreshToken(
          claimsEncoded,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Searches for new media
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesScanMedia(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.routesScanMedia(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns the public system information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesSystemInfoPublic(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SystemInfoPublic>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesSystemInfoPublic(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Updates already existing album
     * @param {string} albumUuid
     * @param {AlbumUpdateData} albumUpdateData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesUpdateAlbum(
      albumUuid: string,
      albumUpdateData: AlbumUpdateData,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesUpdateAlbum(
          albumUuid,
          albumUpdateData,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * Adds media to an album
     * @param {Array<AlbumAddMedia>} albumAddMedia
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesAlbumAddMedia(
      albumAddMedia: Array<AlbumAddMedia>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .routesAlbumAddMedia(albumAddMedia, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new album
     * @param {AlbumInsertData} albumInsertData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesCreateAlbum(
      albumInsertData: AlbumInsertData,
      options?: any
    ): AxiosPromise<AlbumResponse> {
      return localVarFp
        .routesCreateAlbum(albumInsertData, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new user
     * @param {NewUser} newUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesCreateUser(newUser: NewUser, options?: any): AxiosPromise<void> {
      return localVarFp
        .routesCreateUser(newUser, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes an album
     * @param {string} albumUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesDeleteAlbum(albumUuid: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .routesDeleteAlbum(albumUuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of albums of an authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetAlbumList(options?: any): AxiosPromise<Array<AlbumResponse>> {
      return localVarFp
        .routesGetAlbumList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a list of media in an album
     * @param {string} albumUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetAlbumStructure(
      albumUuid: string,
      options?: any
    ): AxiosPromise<Array<MediaResponse>> {
      return localVarFp
        .routesGetAlbumStructure(albumUuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a media
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetMediaByUuid(mediaUuid: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .routesGetMediaByUuid(mediaUuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a list of liked media.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetMediaLikedList(options?: any): AxiosPromise<Array<MediaResponse>> {
      return localVarFp
        .routesGetMediaLikedList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesIndex(options?: any): AxiosPromise<string> {
      return localVarFp
        .routesIndex(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * You must provide either a username or an email together with a password.
     * @param {UserLogin} userLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesLogin(
      userLogin: UserLogin,
      options?: any
    ): AxiosPromise<LoginResponse> {
      return localVarFp
        .routesLogin(userLogin, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes description of a media
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaDeleteDescription(
      mediaUuid: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .routesMediaDeleteDescription(mediaUuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Likes the media.
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaLike(mediaUuid: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .routesMediaLike(mediaUuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a list of all media
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaStructure(options?: any): AxiosPromise<Array<MediaResponse>> {
      return localVarFp
        .routesMediaStructure(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Unlikes the media.
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaUnlike(mediaUuid: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .routesMediaUnlike(mediaUuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates description of a media
     * @param {string} mediaUuid
     * @param {MediaDescription} mediaDescription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaUpdateDescription(
      mediaUuid: string,
      mediaDescription: MediaDescription,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .routesMediaUpdateDescription(mediaUuid, mediaDescription, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Refreshes sent token
     * @param {ClaimsEncoded} claimsEncoded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesRefreshToken(
      claimsEncoded: ClaimsEncoded,
      options?: any
    ): AxiosPromise<ClaimsEncoded> {
      return localVarFp
        .routesRefreshToken(claimsEncoded, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Searches for new media
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesScanMedia(options?: any): AxiosPromise<string> {
      return localVarFp
        .routesScanMedia(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns the public system information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesSystemInfoPublic(options?: any): AxiosPromise<SystemInfoPublic> {
      return localVarFp
        .routesSystemInfoPublic(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates already existing album
     * @param {string} albumUuid
     * @param {AlbumUpdateData} albumUpdateData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesUpdateAlbum(
      albumUuid: string,
      albumUpdateData: AlbumUpdateData,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .routesUpdateAlbum(albumUuid, albumUpdateData, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for routesAlbumAddMedia operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesAlbumAddMediaRequest
 */
export interface DefaultApiRoutesAlbumAddMediaRequest {
  /**
   *
   * @type {Array<AlbumAddMedia>}
   * @memberof DefaultApiRoutesAlbumAddMedia
   */
  readonly albumAddMedia: Array<AlbumAddMedia>;
}

/**
 * Request parameters for routesCreateAlbum operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesCreateAlbumRequest
 */
export interface DefaultApiRoutesCreateAlbumRequest {
  /**
   *
   * @type {AlbumInsertData}
   * @memberof DefaultApiRoutesCreateAlbum
   */
  readonly albumInsertData: AlbumInsertData;
}

/**
 * Request parameters for routesCreateUser operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesCreateUserRequest
 */
export interface DefaultApiRoutesCreateUserRequest {
  /**
   *
   * @type {NewUser}
   * @memberof DefaultApiRoutesCreateUser
   */
  readonly newUser: NewUser;
}

/**
 * Request parameters for routesDeleteAlbum operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesDeleteAlbumRequest
 */
export interface DefaultApiRoutesDeleteAlbumRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiRoutesDeleteAlbum
   */
  readonly albumUuid: string;
}

/**
 * Request parameters for routesGetAlbumStructure operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesGetAlbumStructureRequest
 */
export interface DefaultApiRoutesGetAlbumStructureRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiRoutesGetAlbumStructure
   */
  readonly albumUuid: string;
}

/**
 * Request parameters for routesGetMediaByUuid operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesGetMediaByUuidRequest
 */
export interface DefaultApiRoutesGetMediaByUuidRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiRoutesGetMediaByUuid
   */
  readonly mediaUuid: string;
}

/**
 * Request parameters for routesLogin operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesLoginRequest
 */
export interface DefaultApiRoutesLoginRequest {
  /**
   *
   * @type {UserLogin}
   * @memberof DefaultApiRoutesLogin
   */
  readonly userLogin: UserLogin;
}

/**
 * Request parameters for routesMediaDeleteDescription operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesMediaDeleteDescriptionRequest
 */
export interface DefaultApiRoutesMediaDeleteDescriptionRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiRoutesMediaDeleteDescription
   */
  readonly mediaUuid: string;
}

/**
 * Request parameters for routesMediaLike operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesMediaLikeRequest
 */
export interface DefaultApiRoutesMediaLikeRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiRoutesMediaLike
   */
  readonly mediaUuid: string;
}

/**
 * Request parameters for routesMediaUnlike operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesMediaUnlikeRequest
 */
export interface DefaultApiRoutesMediaUnlikeRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiRoutesMediaUnlike
   */
  readonly mediaUuid: string;
}

/**
 * Request parameters for routesMediaUpdateDescription operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesMediaUpdateDescriptionRequest
 */
export interface DefaultApiRoutesMediaUpdateDescriptionRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiRoutesMediaUpdateDescription
   */
  readonly mediaUuid: string;

  /**
   *
   * @type {MediaDescription}
   * @memberof DefaultApiRoutesMediaUpdateDescription
   */
  readonly mediaDescription: MediaDescription;
}

/**
 * Request parameters for routesRefreshToken operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesRefreshTokenRequest
 */
export interface DefaultApiRoutesRefreshTokenRequest {
  /**
   *
   * @type {ClaimsEncoded}
   * @memberof DefaultApiRoutesRefreshToken
   */
  readonly claimsEncoded: ClaimsEncoded;
}

/**
 * Request parameters for routesUpdateAlbum operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesUpdateAlbumRequest
 */
export interface DefaultApiRoutesUpdateAlbumRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiRoutesUpdateAlbum
   */
  readonly albumUuid: string;

  /**
   *
   * @type {AlbumUpdateData}
   * @memberof DefaultApiRoutesUpdateAlbum
   */
  readonly albumUpdateData: AlbumUpdateData;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Adds media to an album
   * @param {DefaultApiRoutesAlbumAddMediaRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesAlbumAddMedia(
    requestParameters: DefaultApiRoutesAlbumAddMediaRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesAlbumAddMedia(requestParameters.albumAddMedia, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new album
   * @param {DefaultApiRoutesCreateAlbumRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesCreateAlbum(
    requestParameters: DefaultApiRoutesCreateAlbumRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesCreateAlbum(requestParameters.albumInsertData, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new user
   * @param {DefaultApiRoutesCreateUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesCreateUser(
    requestParameters: DefaultApiRoutesCreateUserRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesCreateUser(requestParameters.newUser, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes an album
   * @param {DefaultApiRoutesDeleteAlbumRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesDeleteAlbum(
    requestParameters: DefaultApiRoutesDeleteAlbumRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesDeleteAlbum(requestParameters.albumUuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of albums of an authenticated user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesGetAlbumList(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .routesGetAlbumList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a list of media in an album
   * @param {DefaultApiRoutesGetAlbumStructureRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesGetAlbumStructure(
    requestParameters: DefaultApiRoutesGetAlbumStructureRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesGetAlbumStructure(requestParameters.albumUuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a media
   * @param {DefaultApiRoutesGetMediaByUuidRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesGetMediaByUuid(
    requestParameters: DefaultApiRoutesGetMediaByUuidRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesGetMediaByUuid(requestParameters.mediaUuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a list of liked media.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesGetMediaLikedList(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .routesGetMediaLikedList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesIndex(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .routesIndex(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * You must provide either a username or an email together with a password.
   * @param {DefaultApiRoutesLoginRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesLogin(
    requestParameters: DefaultApiRoutesLoginRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesLogin(requestParameters.userLogin, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes description of a media
   * @param {DefaultApiRoutesMediaDeleteDescriptionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesMediaDeleteDescription(
    requestParameters: DefaultApiRoutesMediaDeleteDescriptionRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesMediaDeleteDescription(requestParameters.mediaUuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Likes the media.
   * @param {DefaultApiRoutesMediaLikeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesMediaLike(
    requestParameters: DefaultApiRoutesMediaLikeRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesMediaLike(requestParameters.mediaUuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a list of all media
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesMediaStructure(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .routesMediaStructure(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Unlikes the media.
   * @param {DefaultApiRoutesMediaUnlikeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesMediaUnlike(
    requestParameters: DefaultApiRoutesMediaUnlikeRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesMediaUnlike(requestParameters.mediaUuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates description of a media
   * @param {DefaultApiRoutesMediaUpdateDescriptionRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesMediaUpdateDescription(
    requestParameters: DefaultApiRoutesMediaUpdateDescriptionRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesMediaUpdateDescription(
        requestParameters.mediaUuid,
        requestParameters.mediaDescription,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Refreshes sent token
   * @param {DefaultApiRoutesRefreshTokenRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesRefreshToken(
    requestParameters: DefaultApiRoutesRefreshTokenRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesRefreshToken(requestParameters.claimsEncoded, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Searches for new media
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesScanMedia(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .routesScanMedia(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns the public system information.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesSystemInfoPublic(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .routesSystemInfoPublic(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates already existing album
   * @param {DefaultApiRoutesUpdateAlbumRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesUpdateAlbum(
    requestParameters: DefaultApiRoutesUpdateAlbumRequest,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .routesUpdateAlbum(
        requestParameters.albumUuid,
        requestParameters.albumUpdateData,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
