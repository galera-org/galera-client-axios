/* tslint:disable */
/* eslint-disable */
/**
 * galera
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { MediaResponse } from "../models";
// @ts-ignore
import { NewUser } from "../models";
// @ts-ignore
import { UserLogin } from "../models";
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {NewUser} newUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesCreateUser: async (
      newUser: NewUser,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'newUser' is not null or undefined
      assertParamExists("routesCreateUser", "newUser", newUser);
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        newUser,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetMediaByUuid: async (
      mediaUuid: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'mediaUuid' is not null or undefined
      assertParamExists("routesGetMediaByUuid", "mediaUuid", mediaUuid);
      const localVarPath = `/media/{media_uuid}`.replace(
        `{${"media_uuid"}}`,
        encodeURIComponent(String(mediaUuid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesIndex: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * You must provide either a username or an email together with a password.
     * @param {UserLogin} userLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesLogin: async (
      userLogin: UserLogin,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLogin' is not null or undefined
      assertParamExists("routesLogin", "userLogin", userLogin);
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userLogin,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaStructure: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/media`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesScanMedia: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/scan_media`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesTest: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/test`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {NewUser} newUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesCreateUser(
      newUser: NewUser,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesCreateUser(newUser, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesGetMediaByUuid(
      mediaUuid: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesGetMediaByUuid(
          mediaUuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesIndex(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.routesIndex(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * You must provide either a username or an email together with a password.
     * @param {UserLogin} userLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesLogin(
      userLogin: UserLogin,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.routesLogin(
        userLogin,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesMediaStructure(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MediaResponse>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routesMediaStructure(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesScanMedia(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.routesScanMedia(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routesTest(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.routesTest(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {NewUser} newUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesCreateUser(newUser: NewUser, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .routesCreateUser(newUser, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} mediaUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesGetMediaByUuid(mediaUuid: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .routesGetMediaByUuid(mediaUuid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesIndex(options?: any): AxiosPromise<string> {
      return localVarFp
        .routesIndex(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * You must provide either a username or an email together with a password.
     * @param {UserLogin} userLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesLogin(userLogin: UserLogin, options?: any): AxiosPromise<boolean> {
      return localVarFp
        .routesLogin(userLogin, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesMediaStructure(options?: any): AxiosPromise<Array<MediaResponse>> {
      return localVarFp
        .routesMediaStructure(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesScanMedia(options?: any): AxiosPromise<string> {
      return localVarFp
        .routesScanMedia(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routesTest(options?: any): AxiosPromise<string> {
      return localVarFp
        .routesTest(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for routesCreateUser operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesCreateUserRequest
 */
export interface DefaultApiRoutesCreateUserRequest {
  /**
   *
   * @type {NewUser}
   * @memberof DefaultApiRoutesCreateUser
   */
  readonly newUser: NewUser;
}

/**
 * Request parameters for routesGetMediaByUuid operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesGetMediaByUuidRequest
 */
export interface DefaultApiRoutesGetMediaByUuidRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiRoutesGetMediaByUuid
   */
  readonly mediaUuid: string;
}

/**
 * Request parameters for routesLogin operation in DefaultApi.
 * @export
 * @interface DefaultApiRoutesLoginRequest
 */
export interface DefaultApiRoutesLoginRequest {
  /**
   *
   * @type {UserLogin}
   * @memberof DefaultApiRoutesLogin
   */
  readonly userLogin: UserLogin;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {DefaultApiRoutesCreateUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesCreateUser(
    requestParameters: DefaultApiRoutesCreateUserRequest,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .routesCreateUser(requestParameters.newUser, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {DefaultApiRoutesGetMediaByUuidRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesGetMediaByUuid(
    requestParameters: DefaultApiRoutesGetMediaByUuidRequest,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .routesGetMediaByUuid(requestParameters.mediaUuid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesIndex(options?: any) {
    return DefaultApiFp(this.configuration)
      .routesIndex(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * You must provide either a username or an email together with a password.
   * @param {DefaultApiRoutesLoginRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesLogin(
    requestParameters: DefaultApiRoutesLoginRequest,
    options?: any
  ) {
    return DefaultApiFp(this.configuration)
      .routesLogin(requestParameters.userLogin, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesMediaStructure(options?: any) {
    return DefaultApiFp(this.configuration)
      .routesMediaStructure(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesScanMedia(options?: any) {
    return DefaultApiFp(this.configuration)
      .routesScanMedia(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public routesTest(options?: any) {
    return DefaultApiFp(this.configuration)
      .routesTest(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
